environment:
  VENUE_HOME: ${EBRO_ROOT}/.state/venue
  LAESPUELA_HOME: /srv/laespuela

tasks:
  default:
    requires: [":docker", caddy, venue-user, configure-backups?]
    script: |
      mkdir -p "${VENUE_HOME}"
      cp docker-compose.yml "${VENUE_HOME}/docker-compose.yml"
      rm -rf "${LAESPUELA_HOME}"/*
      cp -r laespuela/* "${LAESPUELA_HOME}"
      cd "${VENUE_HOME}"
      test -f venue.env
      mkdir -p data/app
      chown -R venue:venue data/app
      echo "VENUE_USER_ID=$(id -u venue)" > .env
      docker compose up --detach --wait --remove-orphans
    when:
      output_changes: |
        cat docker-compose.yml
        cat venue.caddyfile
        cat laespuela/*
      check_fails: |
        test -d "${VENUE_HOME}"
        test -d "${LAESPUELA_HOME}"
        cd "${VENUE_HOME}"
        test -f "docker-compose.yml"
        [ "$(docker compose ps -q)" != "" ]

  caddy:
    extends: [":caddy:configure"]
    script: cat venue.caddyfile | envsubst > "${CADDY_CONF_ROOT}/venue.caddyfile"

  venue-user:
    script: useradd --system --shell /bin/false venue
    when:
      check_fails: cat /etc/passwd | grep venue

  configure-backups:
    if_tasks_exist: [":restic"]
    extends: [":restic:configure"]
    script: |
      set-backup-script venue "cd '${VENUE_HOME}' && mkdir -p backup && rm -rf backup/* && (docker compose exec db pg_dumpall -U venue) > backup/dump.sql"
      set-backup-location venue "${VENUE_HOME}/backup"
