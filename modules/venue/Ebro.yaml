environment:
  VENUE_VERSION: "20250120_203111"
  VENUE_HOME: ${EBRO_ROOT}/.state/venue

tasks:
  default:
    requires: [":docker", caddy, user]
    script: |
      mkdir -p "${VENUE_HOME}"
      cp docker-compose.yml "${VENUE_HOME}/docker-compose.yml"

      cd "${VENUE_HOME}"

      if ! test -f venue.env; then
        secret_key="$(openssl rand -hex 64)"
        echo "VENUE_SECRET_KEY=${secret_key}" >> venue.env
      fi
      venue_user_id="$(id -u venue)"
      echo "VENUE_USER_ID=${venue_user_id}" > .env
      echo "VENUE_VERSION=${VENUE_VERSION}" >> .env

      mkdir -p data/app
      chown -R venue:venue data/app

      docker compose up --detach --wait --remove-orphans
    when:
      output_changes: |
        cat docker-compose.yml
      check_fails: |
        test -d "${VENUE_HOME}"

        cd "${VENUE_HOME}"
        test -f "docker-compose.yml"
        test -f "venue.env"
        test -f ".env"

        active_containers="$(docker compose ps -q)"
        [ "$active_containers" != "" ]

  user:
    script: useradd --system --shell /bin/false venue
    when:
      check_fails: cat /etc/passwd | grep venue

  # configure-backups:
  #   if_tasks_exist: [":restic"]
  #   extends: [":restic:configure"]
  #   script: |
  #     set-backup-script venue "cd '${VENUE_HOME}' && mkdir -p backup && rm -rf backup/* && (docker compose exec db pg_dumpall -U venue) > backup/dump.sql"
  #     set-backup-location venue "${VENUE_HOME}/backup"
