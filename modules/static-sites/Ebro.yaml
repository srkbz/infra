environment:
  SITES_STATE: "${STATIC_SITES_HOME:-/opt/static-sites}"
  SITES_CACHE: "${CACHE_DIR}/static-sites"

modules:
  sites:
    for_each: |
      ls "${EBRO_ROOT}/config/static-sites"

    environment:
      SITE_DOMAIN: "${EBRO_EACH}"
      SITE_HOME: "${EBRO_ROOT}/config/static-sites/${SITE_DOMAIN}"
      SITE_CONFIG: "${SITE_HOME}/config.json"
      SITE_STATE: "${SITES_STATE}/${SITE_DOMAIN}"
      SITE_CACHE: "${SITES_CACHE}/${SITE_DOMAIN}"
      SITE_LIVE: "${SITE_STATE}/live"
      SITE_BUILDS: "${SITE_STATE}/builds"
      SITE_LIVE_COMMIT: "${SITE_STATE}/LIVE_COMMIT"
      SITE_TARGET_COMMIT: "${SITE_STATE}/TARGET_COMMIT"
      SITE_CADDYFILE: "${SITE_CACHE}/Caddyfile"

    tasks:
      default:
        labels:
          discover: "true"
        requires: [build]

      home:
        script: |
          mkdir -p "${SITE_LIVE}"
          mkdir -p "${SITE_BUILDS}"
        when:
          check_fails: |
            test -d "${SITE_LIVE}"
            test -d "${SITE_BUILDS}"

      target-commit:
        requires: [home]
        script: ./scripts/update-target-commit.sh
        when:
          check_fails: |
            test -f "${SITE_TARGET_COMMIT}"
          output_changes: |
            cat "$SITE_CONFIG"

      build:
        requires: [home, target-commit, ":docker"]
        script: ./scripts/build-site.sh
        when:
          check_fails: |
            test -f "${SITE_LIVE_COMMIT}"
            target_commit="$(cat "${SITE_TARGET_COMMIT}")"
            live_commit="$(cat "${SITE_LIVE_COMMIT}")"
            [ "$target_commit" == "$live_commit" ]
          output_changes: |
            cat "$SITE_CONFIG"

      caddy:
        labels:
          caddy.conf: "${SITE_CADDYFILE}"
        script: |
          mkdir -p "$(dirname "${SITE_CADDYFILE}")"
          cat Caddyfile | envsubst > "${SITE_CADDYFILE}"
        when:
          check_fails: test -f "${SITE_CADDYFILE}"
          output_changes: |
            cat Caddyfile | envsubst

#   webhook:
#     extends: [":secrets:op", ":secrets:when-secrets-change"]
#     labels:
#       secret.WEBHOOK_SECRET: "static-sites/${DOMAIN}:WEBHOOK_SECRET"
#       webhook.conf: "${SITE_CACHE}/hook.json"
#     script: |
#       export WEBHOOK_SECRET
#       ./webhook-build.py > "${SITE_CACHE}/hook.json"
#     when:
#       check_fails: |
#         test -f "${SITE_CACHE}/hook.json"
#       output_changes: |
#         cat ./webhook-build.py
